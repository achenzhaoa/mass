/**
mass effect.mcss almost all effect refactoring form animate.css http://daneden.me/animate

Animate.css - http://daneden.me/animate
Licensed under the MIT license
Copyright (c) 2013 Daniel Eden

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, 
distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
*/

/**
 * This file is a good example show some mcss'advantage , like first-class function...
 * Use animate less version https://github.com/machito/animate.less/blob/master/animate.less  for compare
 */

@import 'css3';


/**
 * @options $effect-outpor {Boolean}
 * whether to output the keyframes. default is true
 */
$effect-outport ?= false;

$gen-keyframes = ($name, $block, $with-class){
  $keyframes($name, $block);

  .animated.#{$name}{
    $animation-name: $name;
    @if $with-class{
      $with-class();
    }
  }
}

//
$gen-keyframes-func = ($name, $block, $with-class){
  define('$' + $name, ($args..., $name2 = $name){
    // if last arguments is not a text
    @if typeof($name2) != 'text'{
      push($args, $name2);
      $name2 = $name;
    }
    // placeholder the first elem
    unshift($args, 1);
    $gen-keyframes($name2, ($prefix){
      // setup the $args
      shift($args);
      unshift($args, $prefix);

      apply($block, $args);
    }, $with-class);
    // true means this define will in globalScope
  }, true);
}

$-generate = $if($effect-outport, $gen-keyframes, $gen-keyframes-func);

/**
 * 1. setup
 * =======================
 */
body {
  -webkit-backface-visibility: hidden;
}
.animated {
  $animation-duration: 1s;
  $animation-fill-mode: both;
}

.animated.hinge {
  $animation-duration: 2s;
}


/**
 * 2. effect
 * ==========================
 */

// $flash()
// ----------------
$-generate(flash,($prefix){
  0%, 50%, 100% {opacity: 1;} 
  25%, 75% {opacity: 0;}
});


// $shake($offset = 15px)
// --------------------
$-generate(shake, ($prefix, $offset = 15px){
  $prefix = $prefix && ('-' + $prefix + '-') || '';
  0%, 100% {#{$prefix}transform: translateX(0);}
  10%, 30%, 50%, 70%, 90% {#{$prefix}transform: translateX(-$offset);}
  20%, 40%, 60%, 80% {#{$prefix}transform: translateX($offset);}
});

// $bounce($height)
// ------------------
$-generate(bounce, ($prefix, $height){
  $prefix = $prefix && ('-' + $prefix + '-') || '';
  0%, 20%, 50%, 80%, 100% {#{$prefix}transform: translateY(0);}
  40% {#{$prefix}transform: translateY(-$height);}
  60% {#{$prefix}transform: translateY(-$height / 2);}
});

// tada
$-generate(tada, ($prefix, $scale-offset = 0.2, $degree = 3deg){
  $prefix = $prefix && ('-' + $prefix + '-') || '';
  0% {#{$prefix}transform: scale(1);} 
  10%, 20% {#{$prefix}transform: scale(1 - $scale-offset) rotate(-$degree);}
  30%, 50%, 70%, 90% {#{$prefix}transform: scale(1 + $scale-offset) rotate($degree);}
  40%, 60%, 80% {#{$prefix}transform: scale(1 + $scale-offset) rotate(-$degree);}
  100% {#{$prefix}transform: scale(1) rotate(0);}
});

// swing
$-generate(swing, ($prefix, $degree){

  $pre = $prefix && ('-' + $prefix + '-') || '';
  @if($prefix == webkit){
    20%, 40%, 60%, 80%, 100% { -webkit-transform-origin: top center; }
  }
  20% { #{$pre}transform: rotate($degree); } 
  40% { #{$pre}transform: rotate(-$degree / 3 * 2); }
  60% { #{$pre}transform: rotate($degree / 3); }  
  80% { #{$pre}transform: rotate(-$degree / 3); } 
  100% { #{$pre}transform: rotate(0deg); }
}, {
  $transform-origin: top center
});

// wobble
$-generate(wobble, ($prefix, $offset = 25%, $degree = 5deg){
  $prefix = $prefix && ('-' + $prefix + '-') || '';
  $step = $offset / 5;
  $deg = $degree / 5;
  0%  { #{$prefix}transform: translateX(0%); }
  15% { #{$prefix}transform: translateX(-$offset) rotate(-$degree); }
  30% { #{$prefix}transform: translateX($step * 4) rotate(4 * $deg); }
  45% { #{$prefix}transform: translateX(-$step * 3) rotate(-3 * $deg); }
  60% { #{$prefix}transform: translateX($step * 2) rotate(2 * $deg); }
  75% { #{$prefix}transform: translateX(-$step) rotate(-1 * $deg); }
  100% { #{$prefix}transform: translateX(0); }
});

// pulse
// --------------------------
$-generate(pulse, ($prefix, $scale-offset=0.1){
  $prefix = $prefix && ('-' + $prefix + '-') || '';
  0% { #{$prefix}transform: scale(1); }  
  50% { #{$prefix}transform: scale(1 + $scale-offset); }
  100% { #{$prefix}transform: scale(1); }
});

// flip
// --------------------------
$-generate(flip, ($prefix, $perspect = 300px){
  $prefix = $prefix && ('-' + $prefix + '-') || '';
  0% {
    #{$prefix}transform: perspective($perspect) rotateY(0);
    #{$prefix}animation-timing-function: ease-out;
  }
  40% {
    #{$prefix}transform: perspective($perspect) translateZ(100px) rotateY(170deg);
    #{$prefix}animation-timing-function: ease-out;
  }
  50% {
    #{$prefix}transform: perspective($perspect) translateZ(100px ) rotateY(190deg) scale(1);
    #{$prefix}animation-timing-function: ease-in;
  }
  80% {
    #{$prefix}transform: perspective($perspect) rotateY(360deg) scale(.95);
    #{$prefix}animation-timing-function: ease-in;
  }
  100% {
    #{$prefix}transform: perspective($perspect) scale(1);
    #{$prefix}animation-timing-function: ease-in;
  }
},{
  // !import 可以再声明中，但是在mcss中无法传入函数(它不是一个值), 这里我们用Text转义
  $backface-visibility:  visible t('!important');
});



$-rotate = ($direct, $deg){
  @if $direct == x{
    @return rotateX($deg);
  }
  @return rotateY($deg);
}
// flipIn
// ---------------
$-generate(flipIn, ($prefix, $direct = x){
  $prefix = $prefix && ('-' + $prefix + '-') || '';

  0% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, 90deg);
      opacity: 0;
  }
  40% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, -10deg);
  }
  70% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, 10deg);
  }
  100% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, 0deg);
      opacity: 1;
  }
}, {

});

$-generate(flipOut, ($prefix){

});
